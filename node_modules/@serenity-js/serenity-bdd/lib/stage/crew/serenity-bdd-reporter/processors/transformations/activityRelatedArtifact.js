"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activityRelatedArtifact = activityRelatedArtifact;
const model_1 = require("@serenity-js/core/lib/model");
const crypto_1 = require("crypto");
const tiny_types_1 = require("tiny-types");
const util_1 = require("util");
/**
 * @package
 */
function activityRelatedArtifact(activityId, name, artifact, timestamp) {
    return (report) => (0, tiny_types_1.match)(artifact)
        .when(model_1.HTTPRequestResponse, _ => report.with(httpRequestResponse(activityId, artifact.map(data => data), timestamp)))
        .when(model_1.TextData, _ => report.with(arbitraryData(activityId, name, artifact.map(artifactContents => artifactContents.data), timestamp)))
        .when(model_1.LogEntry, _ => report.with(arbitraryData(activityId, name, artifact.map(artifactContents => artifactContents.data), timestamp)))
        .when(model_1.JSONData, _ => report.with(arbitraryData(activityId, name, artifact.map(value => JSON.stringify(value, undefined, 4)), timestamp)))
        .else(_ => report);
}
function mapToString(dictionary) {
    return Object.keys(dictionary).map(key => `${key}: ${dictionary[key]}`).join('\n');
}
function bodyToString(data) {
    if (data === null || data === undefined) {
        return '';
    }
    if (typeof data === 'string') {
        return data;
    }
    if (typeof data === 'object') {
        return JSON.stringify(data, undefined, 4);
    }
    return (0, util_1.inspect)(data);
}
function httpRequestResponse(activityId, requestResponse, timestamp) {
    return (context) => {
        if (context.steps.has(activityId.value)) {
            context.steps.get(activityId.value).step.restQuery = {
                method: requestResponse.request.method.toUpperCase(),
                path: requestResponse.request.url,
                content: bodyToString(requestResponse.request.data),
                contentType: String(requestResponse.request.headers['Content-Type'] || ''), // todo: add a case insensitive proxy around this RFC 2616: 4.2
                requestHeaders: mapToString(requestResponse.request.headers || {}) || '',
                requestCookies: String(requestResponse.request.headers.Cookie || ''), // todo: add a case insensitive proxy around this RFC 2616: 4.2
                statusCode: requestResponse.response.status,
                responseHeaders: mapToString(requestResponse.response.headers) || '',
                responseCookies: requestResponse.response.headers.Cookie || '', // todo: add a case insensitive proxy around this RFC 2616: 4.2
                responseBody: bodyToString(requestResponse.response.data),
            };
        }
        return context;
    };
}
function arbitraryData(activityId, name, contents, timestamp) {
    return (context) => {
        if (context.steps.has(activityId.value)) {
            const id = (0, crypto_1.createHash)('sha1')
                .update(name.value)
                .update(contents)
                .update(`${timestamp.toMilliseconds()}`)
                .digest('hex');
            context.steps.get(activityId.value).step.reportData.push({
                id: `report-data-${id}`,
                isEvidence: false,
                path: '',
                title: name.value,
                contents,
            });
        }
        return context;
    };
}
//# sourceMappingURL=activityRelatedArtifact.js.map