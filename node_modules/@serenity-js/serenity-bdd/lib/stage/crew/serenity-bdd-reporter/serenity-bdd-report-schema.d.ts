export interface SerenityBDD4ReportSchema {
    actors: ActorSchema[];
    additionalIssues?: string[];
    annotatedResult?: string;
    backgroundTitle?: string;
    backgroundDescription?: string;
    context: string;
    dataTable?: DataTableSchema;
    description?: string;
    driver?: string;
    duration: number;
    featureTag?: TagSchema;
    id: string;
    isManualTestingUpToDate: boolean;
    issues?: string[];
    manual: boolean;
    methodName: string;
    name: string;
    order?: number;
    projectKey: string;
    result: string;
    rule?: BusinessRuleSchema;
    scenarioId: string;
    sessionId?: string;
    startTime: string;
    tags: TagSchema[];
    testCaseName?: string;
    testFailureCause?: ErrorDetailsSchema;
    testFailureClassname?: string;
    testFailureMessage?: string;
    testFailureSummary?: string;
    testSource: string;
    testSteps: TestStepSchema[];
    title: string;
    userStory: UserStorySchema;
}
export interface UserStorySchema {
    displayName: string;
    id: string;
    narrative: string;
    path: string;
    pathElements: PathElementSchema[];
    storyClassName?: string;
    storyName: string;
    type: string;
}
export interface PathElementSchema {
    name: string;
    description: string;
}
export interface ActorSchema {
    name: string;
    can?: string[];
    has?: string[];
}
export interface TagSchema {
    displayName: string;
    name: string;
    type: string;
}
export interface BusinessRuleSchema {
    name: string;
    description: string;
    background?: BackgroundSchema;
}
export interface BackgroundSchema {
    name: string;
    description: string;
    steps?: string[];
}
export interface ErrorDetailsSchema {
    errorType: string;
    message: string;
    rootCause?: ErrorDetailsSchema;
    stackTrace: StackTraceSchema[];
}
export interface StackTraceSchema {
    declaringClass: string;
    fileName: string;
    lineNumber: number;
    methodName: string;
}
export interface TestStepSchema {
    children?: TestStepSchema[];
    description: string;
    duration: number;
    exception?: ErrorDetailsSchema;
    level?: number;
    number: number;
    precondition?: boolean;
    reportData?: ReportDataSchema[];
    restQuery?: RESTQuerySchema;
    result: string;
    screenshots?: ScreenshotAndHtmlSourceSchema[];
    startTime: string;
}
/**
 * https://github.com/serenity-bdd/serenity-core/blob/main/serenity-model/src/main/java/net/thucydides/model/screenshots/ScreenshotAndHtmlSource.java
 */
export interface ScreenshotAndHtmlSourceSchema {
    htmlSource?: string;
    screenshot: string;
    screenshotName: string;
    timeStamp: number;
}
/**
 * https://github.com/serenity-bdd/serenity-core/blob/main/serenity-model/src/main/java/net/thucydides/model/domain/ReportData.java
 */
export interface ReportDataSchema {
    contents: string;
    id: string;
    isEvidence: boolean;
    path: string;
    title: string;
}
export interface DataTableSchema {
    dataSetDescriptors: DataTableDataSetDescriptorSchema[];
    headers: string[];
    predefinedRows: boolean;
    rows: DataTableRowSchema[];
    scenarioOutline: string;
}
export interface DataTableRowSchema {
    values: string[];
    result?: string;
}
export interface DataTableDataSetDescriptorSchema {
    description: string;
    name: string;
    rowCount: number;
    startRow: number;
}
/**
 * Todo:
 *  - review "parameters', should Serenity/JS populate that?
 *       https://github.com/serenity-bdd/serenity-core/blob/main/serenity-model/src/main/java/net/serenitybdd/model/rest/RestQuery.java#L18C52-L19
 *
 * https://github.com/serenity-bdd/serenity-core/blob/main/serenity-model/src/main/java/net/serenitybdd/model/rest/RestQuery.java
 */
export interface RESTQuerySchema {
    content: string;
    contentType: string;
    method: string;
    path: string;
    requestCookies: string;
    requestHeaders: string;
    responseBody: string;
    responseCookies: string;
    responseHeaders: string;
    statusCode: number;
}
//# sourceMappingURL=serenity-bdd-report-schema.d.ts.map