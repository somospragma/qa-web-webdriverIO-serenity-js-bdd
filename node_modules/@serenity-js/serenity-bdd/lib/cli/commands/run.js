"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const path = __importStar(require("path")); // eslint-disable-line unicorn/import-style
const process = __importStar(require("process"));
const defaults_1 = require("../defaults");
const io_2 = require("../io");
const model_1 = require("../model");
const Printer_1 = require("../Printer");
const screenplay_1 = require("../screenplay");
const stage_1 = require("../stage");
const yargs = require('yargs'); // eslint-disable-line @typescript-eslint/no-var-requires
const cwd = new io_1.Path(process.cwd());
module.exports = {
    command: 'run',
    desc: 'Invokes the Serenity BDD CLI jar to produce a Serenity BDD HTML report from the Serenity/JS JSON reports',
    builder: {
        cacheDir: {
            default: defaults_1.defaults.cacheDir,
            describe: 'A relative path to where the Serenity BDD CLI jar file is stored',
        },
        destination: {
            default: defaults_1.defaults.reportDir,
            describe: 'A relative path to the directory where the Serenity BDD report should be produced',
        },
        features: {
            default: cwd.relative(new io_1.RequirementsHierarchy(new io_1.FileSystem(cwd)).rootDirectory()),
            describe: 'A relative path to the requirements hierarchy root directory, such as "./features" or "./spec"',
        },
        artifact: {
            default: defaults_1.defaults.artifact,
            describe: `The GAV identifier of the Serenity BDD CLI artifact to use; You're best off with the default option unless you want to experiment.`,
        },
        source: {
            default: defaults_1.defaults.sourceDir,
            describe: `A relative path to the directory containing the Serenity/JS JSON reports`,
        },
        issueTrackerUrl: {
            describe: `Base URL for issue trackers other than JIRA`,
        },
        jiraProject: {
            describe: `JIRA project identifier`,
        },
        jiraUrl: {
            describe: `Base URL of your JIRA server`,
        },
        project: {
            default: cwd.basename(),
            describe: `Project name to appear in the Serenity reports`,
        },
        shortFilenames: {
            default: true,
            type: 'boolean',
            describe: `Use unique hashes instead of human-readable names for the HTML files`,
        },
        log: {
            default: defaults_1.defaults.log,
            choices: ['warn', 'info', 'debug'],
            describe: `A Logback log level to pass to the Serenity BDD CLI jar`,
        },
    },
    handler: async (argv) => {
        const printer = new Printer_1.Printer(process.stdout, process.stderr), artifactGAV = model_1.GAV.fromString(argv.artifact), pathToArtifact = new io_1.Path(argv.cacheDir).join(artifactGAV.toPath()), moduleRoot = path.resolve(__dirname, '../../../');
        (0, core_1.configure)({
            actors: new stage_1.RunCommandActors(cwd),
            crew: [
                new stage_1.NotificationReporter(printer),
                new stage_1.ProgressReporter(printer),
            ],
        });
        const actor = (0, core_1.actorCalled)('Serenity/JS Reporter');
        try {
            await actor.attemptsTo(screenplay_1.InvokeSerenityBDD.at(pathToArtifact)
                .withProperties(screenplay_1.SystemProperties.of({
                'LOG_LEVEL': argv.log,
                'logback.configurationFile': path.resolve(moduleRoot, './resources/logback.config.xml'),
                'serenity.compress.filenames': `${argv.shortFilenames}`,
                // Serenity BDD requires both --features and this property for FeatureFilePath to work
                // see https://github.com/serenity-bdd/serenity-core/blob/a997617f5a43b5d46a3a81da875b8f850a9c21ab/serenity-model/src/main/java/net/thucydides/model/requirements/FeatureFilePath.java#L10
                'serenity.features.directory': argv.features,
            }))
                .withArguments(screenplay_1.SerenityBDDArguments.from(argv)));
            await actor.dismiss();
        }
        catch (error) {
            printer.error((0, io_2.formatError)(error));
            yargs.exit(1, error.message);
        }
    },
};
//# sourceMappingURL=run.js.map