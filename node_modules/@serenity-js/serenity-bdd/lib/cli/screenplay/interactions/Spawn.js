"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spawn = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const child_process_1 = require("child_process");
const model_1 = require("../../model");
/**
 * @package
 */
class Spawn extends core_1.Interaction {
    pathToExecutable;
    args;
    static the(pathToExecutable, ...args) {
        return new Spawn(pathToExecutable, args);
    }
    constructor(pathToExecutable, args) {
        super((0, io_1.d) `#actor executes ${pathToExecutable} with ${args}`);
        this.pathToExecutable = pathToExecutable;
        this.args = args;
    }
    /**
     * Makes the provided [`Actor`](https://serenity-js.org/api/core/class/Actor/)
     * perform this [`Interaction`](https://serenity-js.org/api/core/class/Interaction/).
     */
    performAs(actor) {
        return actor.answer(this.pathToExecutable)
            .then(pathToExecutable => new Promise((resolve, reject) => {
            actor.collect(model_1.Notification.fromJSON({ message: `Spawning: ${pathToExecutable.value} ${this.args.join(' ')}` }));
            const spawned = (0, child_process_1.spawn)(pathToExecutable.value, this.args, { stdio: [process.stdin, process.stdout, process.stderr] });
            spawned.once('error', (error) => actor.collect(model_1.Complaint.fromJSON({ description: `Invoking Serenity BDD CLI has failed`, message: error.message, stack: error.stack })));
            spawned.once('exit', (exitCode) => exitCode === 0
                ? resolve(void 0)
                : reject(new model_1.ExecutionError(`The following process exited with ${exitCode}: ${pathToExecutable.value} ${this.args.join(' ')}`)));
        }));
    }
}
exports.Spawn = Spawn;
//# sourceMappingURL=Spawn.js.map