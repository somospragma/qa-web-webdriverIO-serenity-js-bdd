"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DownloadArtifact = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const rest_1 = require("@serenity-js/rest");
const interactions_1 = require("../interactions");
const RenameFile_1 = require("../interactions/RenameFile");
const VerifyChecksum_1 = require("./VerifyChecksum");
/**
 * @package
 */
class DownloadArtifact extends core_1.Task {
    gav;
    repository;
    destinationDirectory;
    static identifiedBy(artifactIdentifier) {
        return {
            availableFrom: (repository) => ({
                to: (destinationDirectory) => new DownloadArtifact(artifactIdentifier, repository, destinationDirectory),
            }),
        };
    }
    constructor(gav, repository, destinationDirectory) {
        super(`#actor downloads ${gav.toPath().value} from ${repository.toString()}`);
        this.gav = gav;
        this.repository = repository;
        this.destinationDirectory = destinationDirectory;
    }
    /**
     * Makes the provided [`Actor`](https://serenity-js.org/api/core/class/Actor/)
     * perform this [`Task`](https://serenity-js.org/api/core/class/Task/).
     */
    performAs(actor) {
        const tempFileName = new io_1.Path(`${this.gav.toPath().value}.download`), // eslint-disable-line unicorn/prevent-abbreviations
        pathToTempFile = this.destinationDirectory.join(tempFileName), // eslint-disable-line unicorn/prevent-abbreviations
        pathToFinishedFile = this.destinationDirectory.join(this.gav.toPath());
        return actor.attemptsTo(interactions_1.Notify.that(`Looks like you need the latest Serenity BDD CLI jar. Let me download it for you...`), interactions_1.CreateDirectory.at(this.destinationDirectory), interactions_1.StreamResponse
            .to(rest_1.GetRequest.to(this.artifactUrl()))
            .to(pathToTempFile), interactions_1.Notify.that(`Verifying checksums...`), VerifyChecksum_1.VerifyChecksum.at(this.artifactUrl() + '.sha1').against(pathToTempFile).calculatedUsing('sha1'), RenameFile_1.RenameFile.from(pathToTempFile).to(pathToFinishedFile), interactions_1.Notify.that(`Downloaded ${pathToFinishedFile.value}`));
    }
    artifactUrl() {
        return [
            this.repository.toString().replace(/\/+$/, ''),
            ...this.gav.groupId.split('.'),
            this.gav.artifactId,
            this.gav.version,
            this.gav.toPath().value,
        ].join('/');
    }
}
exports.DownloadArtifact = DownloadArtifact;
//# sourceMappingURL=DownloadArtifact.js.map