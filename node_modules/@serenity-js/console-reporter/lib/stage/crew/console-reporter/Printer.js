"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Printer = void 0;
/**
 * A simple abstraction around the standard output stream
 * with support for indenting the printed text.
 */
class Printer {
    stdout;
    indentation = new Indentation(2);
    constructor(stdout = process.stdout) {
        this.stdout = stdout;
    }
    /**
     * Prints the `args` to the `stdout`, followed by a new line character (`\n`).
     *
     * Please note that this method bypasses any indentation as it's intended
     * to be used to print separator lines, etc.
     *
     */
    println(...args) {
        return this.print(...args, '\n');
    }
    /**
     * Prints the `args` to the `stdout`, indenting the output according to
     * the current indentation level.
     */
    print(...args) {
        this.stdout.write(this.indentation.indented(`${args.map(String).join('')}`));
    }
    /**
     * Increases the current indentation by 2 spaces.
     */
    indent() {
        this.indentation.increase();
    }
    /**
     * Reduces the current indentation by 2 spaces.
     */
    outdent() {
        this.indentation.decrease();
    }
}
exports.Printer = Printer;
/**
 * @package
 */
class Indentation {
    step;
    current = 0;
    constructor(step) {
        this.step = step;
    }
    increase() {
        this.current += this.step;
    }
    decrease() {
        if (this.current - this.step >= 0) {
            this.current -= this.step;
        }
    }
    indented(...fragments) {
        return fragments.join('')
            .split('\n')
            .map(line => line
            ? ' '.repeat(this.current) + line
            : '')
            .join('\n');
    }
}
//# sourceMappingURL=Printer.js.map