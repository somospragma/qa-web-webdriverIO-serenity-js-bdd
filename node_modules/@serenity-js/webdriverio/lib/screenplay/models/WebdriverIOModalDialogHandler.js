"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebdriverIOModalDialogHandler = void 0;
require("webdriverio");
const web_1 = require("@serenity-js/web");
const WebdriverProtocolErrorCode_js_1 = require("./WebdriverProtocolErrorCode.js");
/**
 * WebdriverIO-specific implementation of [`ModalDialogHandler`](https://serenity-js.org/api/web/class/ModalDialogHandler/),
 * used with the [WebDriver protocol](https://webdriver.io/docs/api/webdriver).
 *
 * @group Models
 */
class WebdriverIOModalDialogHandler extends web_1.ModalDialogHandler {
    browser;
    errorHandler;
    defaultHandler = async () => {
        const message = await this.browser.getAlertText();
        await this.browser.dismissAlert();
        this.modalDialog = new web_1.DismissedModalDialog(message);
    };
    currentHandler;
    constructor(browser, errorHandler) {
        super();
        this.browser = browser;
        this.errorHandler = errorHandler;
        this.currentHandler = this.defaultHandler;
        this.errorHandler.setHandlerFor(WebdriverProtocolErrorCode_js_1.WebdriverProtocolErrorCode.UnexpectedAlertOpenError, error_ => this.tryToHandleDialog());
    }
    async tryToHandleDialog() {
        try {
            await this.currentHandler();
        }
        catch (error) {
            if (error.name === WebdriverProtocolErrorCode_js_1.WebdriverProtocolErrorCode.NoSuchAlertError) {
                this.modalDialog = new web_1.AbsentModalDialog();
                return;
            }
            throw error;
        }
    }
    async acceptNext() {
        this.currentHandler = async () => {
            const message = await this.browser.getAlertText();
            await this.browser.acceptAlert();
            this.modalDialog = new web_1.AcceptedModalDialog(message);
        };
    }
    async acceptNextWithValue(text) {
        this.currentHandler = async () => {
            await this.browser.sendAlertText(String(text));
            const message = await this.browser.getAlertText();
            await this.browser.acceptAlert();
            this.modalDialog = new web_1.AcceptedModalDialog(message);
        };
    }
    async dismissNext() {
        this.currentHandler = async () => {
            const message = await this.browser.getAlertText();
            await this.browser.dismissAlert();
            this.modalDialog = new web_1.DismissedModalDialog(message);
        };
    }
    async reset() {
        this.modalDialog = new web_1.AbsentModalDialog();
        this.currentHandler = this.defaultHandler;
    }
    /**
     * @override
     */
    async last() {
        if (this.modalDialog instanceof web_1.AbsentModalDialog) {
            await this.tryToHandleDialog();
        }
        return this.modalDialog;
    }
}
exports.WebdriverIOModalDialogHandler = WebdriverIOModalDialogHandler;
//# sourceMappingURL=WebdriverIOModalDialogHandler.js.map