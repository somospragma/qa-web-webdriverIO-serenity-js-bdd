import { SceneTagged } from '@serenity-js/core/lib/events/index.js';
import Reporter from '@wdio/reporter';
import { TagPrinter } from './TagPrinter.js';
/**
 * @package
 */
export class BrowserCapabilitiesReporter extends Reporter {
    tagPrinter = new TagPrinter();
    serenity;
    tags = [];
    constructor(options) {
        super({ ...options, stdout: false });
        this.serenity = options.serenity;
        this.on('runner:start', BrowserCapabilitiesReporter.prototype.recordBrowserAndPlatformTags.bind(this));
        this.on('test:start', BrowserCapabilitiesReporter.prototype.emitRecordedTags.bind(this));
    }
    recordBrowserAndPlatformTags(event) {
        const tags = event.isMultiremote
            ? this.tagsForAll(event.capabilities) // fixme: WDIO MultiremoteCapabilities seem to have incorrect definition?
            : this.tagPrinter.tagsFor(event.capabilities);
        this.tags.push(...tags);
    }
    tagsForAll(capabilities) {
        return Object.keys(capabilities)
            .reduce((existingTags, entryName) => {
            const newTags = this.tagPrinter.tagsFor(capabilities[entryName]);
            const uniqueNewTags = newTags.filter(tag => !existingTags.some((existingTag) => existingTag.equals(tag)));
            return [
                ...existingTags,
                // todo: maybe add some additional tag to indicate the custom capability name,
                //  or the fact that it's a multi-remote scenario?
                ...uniqueNewTags,
            ];
        }, []);
    }
    emitRecordedTags() {
        this.tags.forEach(tag => {
            this.serenity.announce(new SceneTagged(this.serenity.currentSceneId(), tag, this.serenity.currentTime()));
        });
    }
}
//# sourceMappingURL=BrowserCapabilitiesReporter.js.map