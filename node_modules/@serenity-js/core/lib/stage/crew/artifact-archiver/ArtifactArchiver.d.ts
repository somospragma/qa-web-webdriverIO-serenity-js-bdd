import type { DomainEvent } from '../../../events';
import { FileSystem } from '../../../io';
import type { Stage } from '../../Stage';
import type { StageCrewMember } from '../../StageCrewMember';
/**
 * Stores any artifacts emitted via [`ArtifactGenerated`](https://serenity-js.org/api/core-events/class/ArtifactGenerated/) events on the file system.
 *
 * ## Registering Artifact Archiver programmatically
 *
 * ```ts
 * import { ArtifactArchiver, configure } from '@serenity-js/core'
 *
 * configure({
 *   crew: [
 *     ArtifactArchiver.storingArtifactsAt(`/target/site/serenity`),
 *   ]
 *   // other Serenity/JS config
 * })
 * ```
 *
 * ## Using Artifact Archiver with Playwright Test
 *
 * ```ts
 * // playwright.config.ts
 * import type { PlaywrightTestConfig } from '@serenity-js/playwright-test'
 *
 * const config: PlaywrightTestConfig = {
 *   testDir: './spec',
 *
 *   reporter: [
 *     [ '@serenity-js/playwright-test', {
 *       crew: [
 *         '@serenity-js/serenity-bdd',
 *         [ '@serenity-js/core:ArtifactArchiver', { outputDirectory: 'target/site/serenity' } ],
 *       ]
 *       // other Serenity/JS config
 *     }]
 *   ],
 *   // other Playwright Test config
 * }
 * ```
 *
 * ## Using Artifact Archiver with WebdriverIO
 *
 * ```ts
 * // wdio.conf.ts
 * import { WebdriverIOConfig } from '@serenity-js/webdriverio'
 *
 * export const config: WebdriverIOConfig = {
 *
 *   framework: '@serenity-js/webdriverio',
 *
 *   serenity: {
 *     crew: [
 *      '@serenity-js/serenity-bdd',
 *       [ '@serenity-js/core:ArtifactArchiver', { outputDirectory: 'target/site/serenity' } ],
 *     ]
 *     // other Serenity/JS config
 *   },
 *   // other WebdriverIO config
 * }
 * ```
 *
 * ## Using Artifact Archiver with Protractor
 *
 * ```js
 * // protractor.conf.js
 * exports.config = {
 *   framework:     'custom',
 *   frameworkPath: require.resolve('@serenity-js/protractor/adapter'),
 *
 *   serenity: {
 *     crew: [
 *       '@serenity-js/serenity-bdd',
 *       [ '@serenity-js/core:ArtifactArchiver', { outputDirectory: 'target/site/serenity' } ],
 *     ],
 *     // other Serenity/JS config
 *   },
 *   // other Protractor config
 * }
 * ```
 *
 * @group Stage
 */
export declare class ArtifactArchiver implements StageCrewMember {
    private readonly fileSystem;
    private stage?;
    /**
     * Instantiates an `ArtifactArchiver` storing artifacts in a given `destination`.
     * The `destination` directory will be created automatically and recursively if it doesn't exist.
     *
     * @param destination
     */
    static storingArtifactsAt(...destination: string[]): StageCrewMember;
    /**
     * Instantiates an `ArtifactArchiver` storing artifacts in a given `outputDirectory`.
     * The `outputDirectory` will be created automatically and recursively if it doesn't exist.
     *
     * @param config
     */
    static fromJSON(config: {
        outputDirectory: string;
    }): StageCrewMember;
    /**
     * @param {FileSystem} fileSystem
     * @param {Stage} [stage]
     *  The stage this [`StageCrewMember`](https://serenity-js.org/api/core/interface/StageCrewMember/) should be assigned to
     */
    constructor(fileSystem: FileSystem, stage?: Stage);
    assignedTo(stage: Stage): StageCrewMember;
    /**
     * Handles [`DomainEvent`](https://serenity-js.org/api/core-events/class/DomainEvent/) objects emitted by the [`StageManager`](https://serenity-js.org/api/core/class/StageManager/).
     *
     * @see [`StageCrewMember`](https://serenity-js.org/api/core/interface/StageCrewMember/)
     *
     * @listens {ArtifactGenerated}
     * @emits {ArtifactArchived}
     *
     * @param event
     */
    notifyOf(event: DomainEvent): void;
    private fileNameFor;
    private archive;
    private archivisationAnnouncement;
}
//# sourceMappingURL=ArtifactArchiver.d.ts.map