import { type ErrorFactory, type ErrorOptions, type RuntimeError } from '../errors';
import { type DomainEvent, type EmitsDomainEvents } from '../events';
import { type ActivityDetails, CorrelationId } from '../model';
import { Actor, type Clock, type Duration, type Timestamp } from '../screenplay';
import type { ListensToDomainEvents } from '../stage';
import type { Cast } from './Cast';
import type { StageManager } from './StageManager';
/**
 * Stage is the place where [actors](https://serenity-js.org/api/core/class/Actor/) perform.
 *
 * In more technical terms, the Stage is the main event bus propagating [Serenity/JS domain events](https://serenity-js.org/api/core-events/class/DomainEvent/)
 * to [actors](https://serenity-js.org/api/core/class/Actor/) it instantiates and [stage crew members](https://serenity-js.org/api/core/interface/StageCrewMember/) that have been registered with it.
 *
 * It is unlikely that you'll ever need to interact with the `Stage` directly in your tests. Instead, you'll use functions like
 * [`actorCalled`](https://serenity-js.org/api/core/function/actorCalled/) and [`actorInTheSpotlight`](https://serenity-js.org/api/core/function/actorInTheSpotlight/).
 *
 * ## Learn more
 * - [`configure`](https://serenity-js.org/api/core/function/configure/)
 * - [`engage`](https://serenity-js.org/api/core/function/engage/)
 * - [`StageCrewMember`](https://serenity-js.org/api/core/interface/StageCrewMember/)
 *
 * @group Stage
 */
export declare class Stage implements EmitsDomainEvents {
    private cast;
    private readonly manager;
    private errors;
    private readonly clock;
    private readonly interactionTimeout;
    static readonly unknownSceneId: CorrelationId;
    /**
     * Actors instantiated after the scene has started,
     * who will be dismissed when the scene finishes.
     */
    private actorsOnFrontStage;
    /**
     * Actors instantiated before the scene has started,
     * who will be dismissed when the test run finishes.
     */
    private actorsOnBackstage;
    private actorsOnStage;
    /**
     * The most recent actor referenced via the [`Actor`](https://serenity-js.org/api/core/class/Actor/) method
     */
    private actorInTheSpotlight;
    private currentActivity;
    private currentScene;
    /**
     * @param cast
     * @param manager
     * @param errors
     * @param clock
     * @param interactionTimeout
     */
    constructor(cast: Cast, manager: StageManager, errors: ErrorFactory, clock: Clock, interactionTimeout: Duration);
    /**
     * An alias for [`Stage.actor`](https://serenity-js.org/api/core/class/Stage/#actor)
     *
     * @param name
     */
    theActorCalled(name: string): Actor;
    /**
     * Instantiates a new [`Actor`](https://serenity-js.org/api/core/class/Actor/) or fetches an existing one
     * identified by their name if they've already been instantiated.
     *
     * @param name
     *  Case-sensitive name of the Actor, e.g. `Alice`
     */
    actor(name: string): Actor;
    /**
     * Returns the last [`Actor`](https://serenity-js.org/api/core/class/Actor/) instantiated via [`Stage.actor`](https://serenity-js.org/api/core/class/Stage/#actor).
     * Useful when you don't can't or choose not to reference the actor by their name.
     *
     * @throws [`LogicError`](https://serenity-js.org/api/core/class/LogicError/)
     *  If no [`Actor`](https://serenity-js.org/api/core/class/Actor/) has been activated yet
     */
    theActorInTheSpotlight(): Actor;
    /**
     * Returns `true` if there is an [`Actor`](https://serenity-js.org/api/core/class/Actor/) in the spotlight, `false` otherwise.
     */
    theShowHasStarted(): boolean;
    /**
     * Configures the Stage to prepare [actors](https://serenity-js.org/api/core/class/Actor/)
     * instantiated via [`Stage.actor`](https://serenity-js.org/api/core/class/Stage/#actor) using the provided [cast](https://serenity-js.org/api/core/class/Cast/).
     *
     * @param actors
     */
    engage(actors: Cast): void;
    /**
     * Assigns listeners to be notified of [Serenity/JS domain events](https://serenity-js.org/api/core-events/class/DomainEvent/)
     * emitted via [`Stage.announce`](https://serenity-js.org/api/core/class/Stage/#announce).s
     *
     * @param listeners
     */
    assign(...listeners: ListensToDomainEvents[]): void;
    /**
     * Notifies all the assigned listeners of the events,
     * emitting them one by one.
     *
     * @param events
     */
    announce(...events: Array<DomainEvent>): void;
    private announceSingle;
    /**
     * Returns current time. This method should be used whenever
     * [`DomainEvent`](https://serenity-js.org/api/core-events/class/DomainEvent/) objects are instantiated by you programmatically.
     */
    currentTime(): Timestamp;
    /**
     * Generates and remembers a `CorrelationId`
     * for the current scene.
     *
     * This method should be used in custom test runner adapters
     * when instantiating a [SceneStarts](https://serenity-js.org/api/core-events/class/SceneStarts/) event.
     *
     * #### Learn more
     * - [`Stage.currentSceneId`](https://serenity-js.org/api/core/class/Stage/#currentSceneId)
     */
    assignNewSceneId(): CorrelationId;
    /**
     * Returns the `CorrelationId` for the current scene.
     *
     * #### Learn more
     * - [`Stage.assignNewSceneId`](https://serenity-js.org/api/core/class/Stage/#assignNewSceneId)
     */
    currentSceneId(): CorrelationId;
    /**
     * Generates and remembers a `CorrelationId`
     * for the current [`Activity`](https://serenity-js.org/api/core/class/Activity/).
     *
     * This method should be used in custom test runner adapters
     * when instantiating the [ActivityStarts](https://serenity-js.org/api/core-events/class/ActivityStarts/) event.
     *
     * #### Learn more
     * - [`Stage.currentActivityId`](https://serenity-js.org/api/core/class/Stage/#currentActivityId)
     */
    assignNewActivityId(activityDetails: ActivityDetails): CorrelationId;
    /**
     * Returns the `CorrelationId` for the current [`Activity`](https://serenity-js.org/api/core/class/Activity/).
     *
     * #### Learn more
     * - [`Stage.assignNewSceneId`](https://serenity-js.org/api/core/class/Stage/#assignNewSceneId)
     */
    currentActivityId(): CorrelationId;
    /**
     * Returns a Promise that will be resolved when any asynchronous
     * post-processing activities performed by Serenity/JS are completed.
     *
     * Invoked in Serenity/JS test runner adapters to inform the test runner when
     * the scenario has finished and when it's safe for the test runner to proceed
     * with the next test, or finish execution.
     */
    waitForNextCue(): Promise<void>;
    createError<RE extends RuntimeError>(errorType: new (...args: any[]) => RE, options: ErrorOptions): RE;
    private instantiatedActorCalled;
    private notifyOfStageExit;
    private dismiss;
    private typeOf;
}
//# sourceMappingURL=Stage.d.ts.map