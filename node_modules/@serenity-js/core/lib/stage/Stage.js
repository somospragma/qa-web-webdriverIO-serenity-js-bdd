"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stage = void 0;
const tiny_types_1 = require("tiny-types");
const errors_1 = require("../errors");
const events_1 = require("../events");
const model_1 = require("../model");
const screenplay_1 = require("../screenplay");
/**
 * Stage is the place where [actors](https://serenity-js.org/api/core/class/Actor/) perform.
 *
 * In more technical terms, the Stage is the main event bus propagating [Serenity/JS domain events](https://serenity-js.org/api/core-events/class/DomainEvent/)
 * to [actors](https://serenity-js.org/api/core/class/Actor/) it instantiates and [stage crew members](https://serenity-js.org/api/core/interface/StageCrewMember/) that have been registered with it.
 *
 * It is unlikely that you'll ever need to interact with the `Stage` directly in your tests. Instead, you'll use functions like
 * [`actorCalled`](https://serenity-js.org/api/core/function/actorCalled/) and [`actorInTheSpotlight`](https://serenity-js.org/api/core/function/actorInTheSpotlight/).
 *
 * ## Learn more
 * - [`configure`](https://serenity-js.org/api/core/function/configure/)
 * - [`engage`](https://serenity-js.org/api/core/function/engage/)
 * - [`StageCrewMember`](https://serenity-js.org/api/core/interface/StageCrewMember/)
 *
 * @group Stage
 */
class Stage {
    cast;
    manager;
    errors;
    clock;
    interactionTimeout;
    static unknownSceneId = new model_1.CorrelationId('unknown');
    /**
     * Actors instantiated after the scene has started,
     * who will be dismissed when the scene finishes.
     */
    actorsOnFrontStage = new Map();
    /**
     * Actors instantiated before the scene has started,
     * who will be dismissed when the test run finishes.
     */
    actorsOnBackstage = new Map();
    actorsOnStage = this.actorsOnBackstage;
    /**
     * The most recent actor referenced via the [`Actor`](https://serenity-js.org/api/core/class/Actor/) method
     */
    actorInTheSpotlight = undefined;
    currentActivity = undefined;
    currentScene = Stage.unknownSceneId;
    /**
     * @param cast
     * @param manager
     * @param errors
     * @param clock
     * @param interactionTimeout
     */
    constructor(cast, manager, errors, clock, interactionTimeout) {
        this.cast = cast;
        this.manager = manager;
        this.errors = errors;
        this.clock = clock;
        this.interactionTimeout = interactionTimeout;
        (0, tiny_types_1.ensure)('Cast', cast, (0, tiny_types_1.isDefined)());
        (0, tiny_types_1.ensure)('StageManager', manager, (0, tiny_types_1.isDefined)());
        (0, tiny_types_1.ensure)('ErrorFactory', errors, (0, tiny_types_1.isDefined)());
        (0, tiny_types_1.ensure)('Clock', clock, (0, tiny_types_1.isDefined)());
        (0, tiny_types_1.ensure)('interactionTimeout', interactionTimeout, (0, tiny_types_1.isDefined)());
    }
    /**
     * An alias for [`Stage.actor`](https://serenity-js.org/api/core/class/Stage/#actor)
     *
     * @param name
     */
    theActorCalled(name) {
        return this.actor(name);
    }
    /**
     * Instantiates a new [`Actor`](https://serenity-js.org/api/core/class/Actor/) or fetches an existing one
     * identified by their name if they've already been instantiated.
     *
     * @param name
     *  Case-sensitive name of the Actor, e.g. `Alice`
     */
    actor(name) {
        if (!this.instantiatedActorCalled(name)) {
            let actor;
            try {
                const newActor = new screenplay_1.Actor(name, this, [
                    new errors_1.RaiseErrors(this),
                    new screenplay_1.ScheduleWork(this.clock, this.interactionTimeout)
                ]);
                actor = this.cast.prepare(newActor);
            }
            catch (error) {
                throw new errors_1.ConfigurationError(`${this.typeOf(this.cast)} encountered a problem when preparing actor "${name}" for stage`, error);
            }
            if (!(actor instanceof screenplay_1.Actor)) {
                throw new errors_1.ConfigurationError(`Instead of a new instance of actor "${name}", ${this.typeOf(this.cast)} returned ${actor}`);
            }
            this.actorsOnStage.set(name, actor);
            this.announce(new events_1.ActorEntersStage(this.currentScene, actor.toJSON()));
        }
        if (this.actorsOnBackstage.has(name)) {
            this.announce(new events_1.ActorEntersStage(this.currentScene, this.actorsOnBackstage.get(name).toJSON()));
        }
        this.actorInTheSpotlight = this.instantiatedActorCalled(name);
        return this.actorInTheSpotlight;
    }
    /**
     * Returns the last [`Actor`](https://serenity-js.org/api/core/class/Actor/) instantiated via [`Stage.actor`](https://serenity-js.org/api/core/class/Stage/#actor).
     * Useful when you don't can't or choose not to reference the actor by their name.
     *
     * @throws [`LogicError`](https://serenity-js.org/api/core/class/LogicError/)
     *  If no [`Actor`](https://serenity-js.org/api/core/class/Actor/) has been activated yet
     */
    theActorInTheSpotlight() {
        if (!this.actorInTheSpotlight) {
            throw new errors_1.LogicError(`There is no actor in the spotlight yet. Make sure you instantiate one with stage.actor(actorName) before calling this method.`);
        }
        return this.actorInTheSpotlight;
    }
    /**
     * Returns `true` if there is an [`Actor`](https://serenity-js.org/api/core/class/Actor/) in the spotlight, `false` otherwise.
     */
    theShowHasStarted() {
        return !!this.actorInTheSpotlight;
    }
    /**
     * Configures the Stage to prepare [actors](https://serenity-js.org/api/core/class/Actor/)
     * instantiated via [`Stage.actor`](https://serenity-js.org/api/core/class/Stage/#actor) using the provided [cast](https://serenity-js.org/api/core/class/Cast/).
     *
     * @param actors
     */
    engage(actors) {
        (0, tiny_types_1.ensure)('Cast', actors, (0, tiny_types_1.isDefined)());
        this.cast = actors;
    }
    /**
     * Assigns listeners to be notified of [Serenity/JS domain events](https://serenity-js.org/api/core-events/class/DomainEvent/)
     * emitted via [`Stage.announce`](https://serenity-js.org/api/core/class/Stage/#announce).s
     *
     * @param listeners
     */
    assign(...listeners) {
        this.manager.register(...listeners);
    }
    /**
     * Notifies all the assigned listeners of the events,
     * emitting them one by one.
     *
     * @param events
     */
    announce(...events) {
        events.forEach(event => {
            this.announceSingle(event);
        });
    }
    announceSingle(event) {
        if (event instanceof events_1.SceneStarts) {
            this.actorsOnStage = this.actorsOnFrontStage;
        }
        if (event instanceof events_1.SceneFinishes || event instanceof events_1.TestRunFinishes) {
            this.notifyOfStageExit(this.currentSceneId());
        }
        this.manager.notifyOf(event);
        if (event instanceof events_1.SceneFinishes) {
            this.dismiss(this.actorsOnStage);
            this.actorsOnStage = this.actorsOnBackstage;
        }
        if (event instanceof events_1.TestRunFinishes) {
            this.dismiss(this.actorsOnStage);
        }
    }
    /**
     * Returns current time. This method should be used whenever
     * [`DomainEvent`](https://serenity-js.org/api/core-events/class/DomainEvent/) objects are instantiated by you programmatically.
     */
    currentTime() {
        return this.manager.currentTime();
    }
    /**
     * Generates and remembers a `CorrelationId`
     * for the current scene.
     *
     * This method should be used in custom test runner adapters
     * when instantiating a [SceneStarts](https://serenity-js.org/api/core-events/class/SceneStarts/) event.
     *
     * #### Learn more
     * - [`Stage.currentSceneId`](https://serenity-js.org/api/core/class/Stage/#currentSceneId)
     */
    assignNewSceneId() {
        // todo: inject an id factory to make it easier to test
        this.currentScene = model_1.CorrelationId.create();
        return this.currentScene;
    }
    /**
     * Returns the `CorrelationId` for the current scene.
     *
     * #### Learn more
     * - [`Stage.assignNewSceneId`](https://serenity-js.org/api/core/class/Stage/#assignNewSceneId)
     */
    currentSceneId() {
        return this.currentScene;
    }
    /**
     * Generates and remembers a `CorrelationId`
     * for the current [`Activity`](https://serenity-js.org/api/core/class/Activity/).
     *
     * This method should be used in custom test runner adapters
     * when instantiating the [ActivityStarts](https://serenity-js.org/api/core-events/class/ActivityStarts/) event.
     *
     * #### Learn more
     * - [`Stage.currentActivityId`](https://serenity-js.org/api/core/class/Stage/#currentActivityId)
     */
    assignNewActivityId(activityDetails) {
        this.currentActivity = {
            id: model_1.CorrelationId.create(),
            details: activityDetails,
        };
        return this.currentActivity.id;
    }
    /**
     * Returns the `CorrelationId` for the current [`Activity`](https://serenity-js.org/api/core/class/Activity/).
     *
     * #### Learn more
     * - [`Stage.assignNewSceneId`](https://serenity-js.org/api/core/class/Stage/#assignNewSceneId)
     */
    currentActivityId() {
        if (!this.currentActivity) {
            throw new errors_1.LogicError(`No activity is being performed. Did you call assignNewActivityId before invoking currentActivityId?`);
        }
        return this.currentActivity.id;
    }
    /**
     * Returns a Promise that will be resolved when any asynchronous
     * post-processing activities performed by Serenity/JS are completed.
     *
     * Invoked in Serenity/JS test runner adapters to inform the test runner when
     * the scenario has finished and when it's safe for the test runner to proceed
     * with the next test, or finish execution.
     */
    waitForNextCue() {
        return this.manager.waitForNextCue();
    }
    createError(errorType, options) {
        return this.errors.create(errorType, {
            location: this.currentActivity?.details.location,
            ...options,
        });
    }
    instantiatedActorCalled(name) {
        return this.actorsOnBackstage.has(name)
            ? this.actorsOnBackstage.get(name)
            : this.actorsOnFrontStage.get(name);
    }
    notifyOfStageExit(sceneId) {
        for (const actor of this.actorsOnStage.values()) {
            this.announce(new events_1.ActorStageExitStarts(sceneId, actor.toJSON(), this.currentTime()));
        }
    }
    async dismiss(activeActors) {
        const actors = Array.from(activeActors.values());
        if (actors.includes(this.actorInTheSpotlight)) {
            this.actorInTheSpotlight = undefined;
        }
        // Wait for the Photographer to finish taking any screenshots
        await this.manager.waitForAsyncOperationsToComplete();
        const actorsToDismiss = new Map(actors.map(actor => [actor, model_1.CorrelationId.create()]));
        for (const [actor, correlationId] of actorsToDismiss) {
            this.announce(new events_1.ActorStageExitAttempted(correlationId, new model_1.Name(actor.name), this.currentTime()));
        }
        // Try to dismiss each actor
        for (const [actor, correlationId] of actorsToDismiss) {
            try {
                await actor.dismiss();
                this.announce(new events_1.ActorStageExitCompleted(correlationId, new model_1.Name(actor.name), this.currentTime()));
            }
            catch (error) {
                this.announce(new events_1.ActorStageExitFailed(error, correlationId, this.currentTime()));
            }
        }
        activeActors.clear();
    }
    typeOf(cast) {
        return cast.constructor === Object
            ? 'Cast'
            : cast.constructor.name;
    }
}
exports.Stage = Stage;
//# sourceMappingURL=Stage.js.map