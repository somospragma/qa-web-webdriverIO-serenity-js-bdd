import type { Stage } from '@serenity-js/core';
import type { ActivityFinished, ActivityStarts, DomainEvent } from '@serenity-js/core/lib/events';
/**
 * Configures the [`Photographer`](https://serenity-js.org/api/web/class/Photographer/) to take photos, a.k.a. screenshots,
 * of the [`Activity`](https://serenity-js.org/api/core/class/Activity/) performed by the [`Actor`](https://serenity-js.org/api/core/class/Actor/) in the [spotlight](https://serenity-js.org/api/core/function/actorInTheSpotlight/)
 * when desired conditions are met.
 *
 * @group Stage
 */
export declare abstract class PhotoTakingStrategy {
    /**
     * Takes a photo of the web browser used by the [`Actor`](https://serenity-js.org/api/core/class/Actor/) in the [spotlight](https://serenity-js.org/api/core/function/actorInTheSpotlight/).
     *
     * #### Learn more
     * - [ActivityStarts](https://serenity-js.org/api/core-events/class/ActivityStarts/)
     * - [ActivityFinished](https://serenity-js.org/api/core-events/class/ActivityFinished/)
     * - [`Stage`](https://serenity-js.org/api/core/class/Stage/)
     *
     * @param event
     * @param stage
     *  The Stage that holds reference to the Actor in the spotlight
     */
    considerTakingPhoto(event: ActivityStarts | ActivityFinished, stage: Stage): Promise<void>;
    protected abstract shouldTakeAPhotoOf(event: DomainEvent): boolean;
    protected abstract photoNameFor(event: DomainEvent): string;
    private combinedNameFrom;
    private shouldIgnore;
}
//# sourceMappingURL=PhotoTakingStrategy.d.ts.map